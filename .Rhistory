breaks = seq(min(spd$Date)-5, max(spd$Date)+5, 30),
limits = c(as.Date("2012-10-01"), as.Date("2012-11-30"))) +
ylab("Frequency") + xlab("Year and Month") +
theme_bw() + opts(axis.text.x = theme_text(angle=90))
library(ggplot2)
ggplot(spd, aes(x=Date)) + geom_histogram(binwidth=30, colour="white") +
scale_x_date(labels = date_format("%Y-%b"),
breaks = seq(min(spd$Date)-5, max(spd$Date)+5, 30),
limits = c(as.Date("2012-10-01"), as.Date("2012-11-30"))) +
ylab("Frequency") + xlab("Year and Month") +
theme_bw() + opts(axis.text.x = theme_text(angle=90))
ggplot(spd, aes(x=Date)) + geom_histogram(binwidth=30, colour="white") +
scale_x_date(labels = date_format("%Y-%b"),
breaks = seq(min(spd$Date)-5, max(spd$Date)+5, 30),
limits = c(as.Date("2012-10-01"), as.Date("2012-11-30"))) +
ylab("Frequency") + xlab("Year and Month") +
theme_bw())
class(spd$Date)
hist(spd, "weeks", format = "%Y%m%d"
hist(spd, "weeks", format = "%Y%m%d"
hist(spd, "weeks", format = "%Y%m%d")
hist(spd, "weeks")
, format = "%Y%m%d"
hist(spd, "weeks", format = "%Y%m%d")
hist(spd, "weeks", format = "%Y %b")
hist(spd$Dates, "days", ...,
xlab = deparse(substitute(spd$Dates)),
plot = TRUE, freq = FALSE,
start.on.monday = TRUE, format = "%d.%m.%Y")
hist(spd$Dates, "days",
xlab = deparse(substitute(spd$Dates)),
plot = TRUE, freq = FALSE,
start.on.monday = TRUE, format = "%d.%m.%Y")
hist(spd$Steps, "days",
xlab = deparse(substitute(spd$Dates)),
plot = TRUE, freq = FALSE,
start.on.monday = TRUE, format = "%d.%m.%Y")
hist(spd$Steps, "Dates",
xlab = deparse(substitute(spd$Dates)),
plot = TRUE, freq = FALSE,
start.on.monday = TRUE, format = "%d.%m.%Y")
random.dates <- as.Date("2001/1/1") + 70*runif(100)
hist(random.dates, "weeks", format = "%d %b")
class(random.dates)
View(random.dates)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data <- read.csv("./activity.csv", sep = ",")
data$date <- as.Date(data$date)
spd <- aggregate(data$steps, by = list(data$date), sum)
names(spd) <- c("Date", "Steps")
spd
hist(spd$Dates, "days", format = "%Y.%m.%d")
hist(spd$Dates, "weeks", format = "%Y.%m.%d")
hist(spd$Dates, "weeks", format = "%d %b")
library(ggplot2)
library(scales)
ggplot(spd$Date)
ggplot(spd$Steps)
ggplot(spd$Steps)
ggplot(spd)
ggplot(spd, aes(x = spd$Date, y = spd$Steps))
ggplot(spd, aes(x = spd$Date, y = spd$Steps))
ggplot(spd, aes(x = spd$Date, y = spd$Steps)) + geom_histogram()
ggplot(spd, aes(x = "Date", y = "Steps")) + geom_histogram()
ggplot(spd, aes(x = Date, y = x)) + geom_histogram()
ggplot(spd, aes(x = Date)) + geom_histogram()
ggplot(spd, aes(x = steps)) + geom_histogram()
ggplot(spd, aes(x = Steps)) + geom_histogram()
ggplot(spd, aes(x = Steps)) + geom_histogram() + ylab("Date")
ggplot(spd, aes(x = Steps)) + geom_histogram() + xlab("Date")
spd
ggplot(spd, aes(x = Steps)) + geom_histogram() + xlab("Date") +
scale_x_date(breaks="1 month", labels=date_format("%Y-%b"),
limits=c(as.Date("2012-10-01"),as.Date("2012-11-30")))
ggplot(spd, aes(x = Date)) + geom_histogram() + xlab("Date") +
scale_x_date(breaks="1 month", labels=date_format("%Y-%b"),
limits=c(as.Date("2012-10-01"),as.Date("2012-11-30")))
ggplot(spd, aes(x = Date, y = Steps)) + geom_histogram() + xlab("Date") +
scale_x_date(breaks="1 month", labels=date_format("%Y-%b"),
limits=c(as.Date("2012-10-01"),as.Date("2012-11-30")))
ggplot(spd, aes(x = Steps)) + geom_histogram() + xlab("Date") +
scale_x_date(breaks="1 month", labels=date_format("%Y-%b"),
limits=c(as.Date("2012-10-01"),as.Date("2012-11-30")))
ggplot(spd, aes(x = Steps)) + geom_histogram() + xlab("Date"))
ggplot(spd, aes(x = Steps)) + geom_histogram() + xlab("Date")
library(lubridate)
?ymd_hms
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data <- read.csv("./activity.csv", sep = ",")
data$date <- ymd_hms(data$date)
data
data <- read.csv("./activity.csv", sep = ",")
View(data)
data$date <- ymd(data$date)
class(data$date)
data$date <- as.POSIXct(data$date)
class(data$date)
ggplot(spd, aes(x = Dates, y = Steps)) + geom_histogram() + xlab("Date")
spd <- aggregate(data$steps, by = list(data$date), sum)
names(spd) <- c("Date", "Steps")
ggplot(spd, aes(x = Date, y = Steps)) + geom_histogram() + xlab("Date")
ggplot(spd, aes(x = Date, y = Steps)) + geom_bar() + xlab("Date")
ggplot(spd, aes(x = Date, y = Steps)) + geom_bar(stat = "identity") + xlab("Date")
ggplot(spd, aes(x = Date, y = Steps)) + geom_histogram(stat = "identity") + xlab("Date")
ggplot(spd, aes(x = Date, y = Steps)) + geom_histogram(binwidth = 1,
stat = "identity") +
xlab("Date")
meansteps <- aggregate(data$steps, by = list(data$date), mean)
menasteps
meansteps
meansteps <- aggregate(data$steps, by = list(data$date), mean)
mediansteps <- aggregate(data$steps, by = list(data$date), median)
stepscalc <- merge(meansteps, mediansteps, by = Group.1)
stepscalc <- merge(meansteps, mediansteps, by = list(Group.1))
stepscalc <- merge(meansteps, mediansteps, by = "Group.1")
stepscalc
stepscalc <- merge(meansteps, mediansteps)
stepscalc
meansteps <- aggregate(data$steps, by = list(data$date), mean)
mediansteps <- aggregate(data$steps, by = list(data$date), median)
stepscalc <- merge(meansteps, mediansteps)
stepscalc
stepscalc <- merge(meansteps[,1:2], mediansteps[,2])
stepscalc
mediansteps
median(data$steps)
median(data$steps, na.rm = TRUE)
?median
stepscalc
meansteps
mediansteps
dim(meansteps)
stepscalc <- merge(meansteps, mediansteps, by = list("Group.1"))
stepscalc <- merge(meansteps, mediansteps, by = "Group.1")
stepscalc
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data <- read.csv("./activity.csv", sep = ",")
data$date <- as.POSIXct(data$date)
spd <- aggregate(data$steps, by = list(data$date), sum)
names(spd) <- c("Date", "Steps")
spd
ggplot(spd, aes(x = Date, y = Steps)) +
geom_histogram(binwidth = 1, stat = "identity") +
xlab("Date")
random.dates <- as.Date("2001/1/1") + 70*runif(100)
hist(random.dates, "weeks", format = "%d %b")
intervals <- aggregate(data$steps, by = list(data$interval), mean)
intervals
intervals <- aggregate(na.omit(data$steps), by = list(data$interval), mean)
intervals <- aggregate(na.omit(data$steps), by = list(na.omit(data$interval)), mean)
data2 <- na.omit(data)
intervals <- aggregate(data2$steps, by = list(data2$interval), mean)
intervals
data3<- na.omit(data)
meansteps <- aggregate(data3$steps, by = list(data3$date), mean)
mediansteps <- aggregate(data3$steps, by = list(data3$date), median)
stepscalc <- merge(meansteps, mediansteps, by = "Group.1")
names(stepscalc) <- c("Date", "Mean", "Median")
stepscalc
names(intervals) <- c("Interval", "AverageSteps")
plot(intervals$Interval, intervals$AverageSteps, type = "l")
plot(intervals$Interval, intervals$AverageSteps, type = "l", ylab = "Average Steps", xlab = "5 Minutes Interval", main = "Average steps per 5 minutes interval")
is.na(data)
isTRUE(is.na(data))
sum(is.na(data))
dim(data)
sum(is.na(data$steps))
which(data$steps == 0)
sum(which(data$steps == 0))
library(dplyr)
?coalesce
?replace_na
which(data$steps == NA)
which(data$steps == is.na(data$steps))
which(is.na(data$steps))
nacols <- which(is.na(data$steps))
for (n in nacols) {
data[n,]
}
for (n in nacols) {
print(data[n,])
}
View(data)
view(spd)
View(spd)
unique(data$date)
subse <- data[nacols,]
uniques <- unique(data$date)
if(uniques[1,] == subse[1,2]){
print("hola")
}
if(uniques[1] == subse[1,2]){
print("hola")
}
if(uniques[1] == data[nacols[1]]){
print("hola")
}
uniques <- unique(data$date)
if(uniques[1] == data[nacols[1]]){
print("hola")
}
if(uniques[1] == data[nacols[1],]){
print("hola")
}
if(uniques[1] == data[nacols[1,],]){
print("hola")
}
if(uniques[1] == data[nacols[1,1],]){
print("hola")
}
if(uniques[1] == data[nacols[1],]){
print("hola")
}
if(uniques[1] == data[nacols[1],1]){
print("hola")
}
data[nacols[1],1]
data[nacols[1],]
uniques[1]
which(meansteps[, 1] == data[nacols[1],2]))
which(meansteps[, 1] == data[nacols[1],2])
data[nacols[1],1]) <- which(data[nacols[1],2] == meansteps[, 1])
data[nacols[1],1]) <- which(data[nacols[1],2] == meansteps[, 1])
which(data[nacols[1],2] == meansteps[, 1])
data[nacols[1],1]) <- which(data[nacols[1],2] %in% meansteps[, 1])
which(data[nacols[1],2] %in% meansteps[, 1])
which(data[nacols[1],2] == meansteps[, 2])
which(data[nacols[1],2] == meansteps[, 3])
which(data[nacols[1],2] == meansteps$Group.1)
data[nacols[1],2]
meansteps[, 1]
which(grepl(data[nacols[1],2],meansteps[, 1]))
data[nacols[1],1])
data[nacols[1],1]
data[nacols[1],2]
which(data[nacols[1],2] %in% mediansteps[,2])
data[nacols[1],2] %in% mediansteps[,2]
mediansteps[,2]
data[nacols[1],2] %in% meansteps[,2]
meansteps[,2]
data[nacols[1],2] %in% meansteps[,1]
meansteps[,1]
data[nacols[1],2]
which(data[nacols[1],2] %in% data[,2])
which(data[nacols[15],2] %in% data[,2])
which(data[nacols[300],2] %in% data[,2])
which(data[nacols[500],2] %in% data[,2])
which(data[nacols[1],2] == data[1,2])
which(data[nacols[1],2] == data[,2])
which(data[nacols[500],2] == data[,2])
which(data[nacols[1],2] == subse[,2])
which(data[nacols[2],2] == subse[,2])
which(data[nacols[3],2] == subse[,2])
which(data[nacols[500],2] == subse[,2])
subse
if(data[nacols[500],2] == subse[,2]){
1
}
if(data[nacols[500],2] == subse[1,2]){
}
1
which(uniques == data[nacols[500],2])
if(which(unique(uniques == data[nacols[500],2]))){
}
if(which(uniques == data[nacols[500],2])){
}
if(which(uniques == data[nacols[500],2]) == 8){
TRUE
}
nacols
if(which(uniques == data[nacols[1],2]) == 1){
data[nacols[1],1]) <- meansteps$x[1]
}
if(which(uniques == data[nacols[1],2]) == 1){
data[nacols[1],1] <- meansteps$x[1]
}
uniques
which(subse[,2] == uniques[1])
meansteps
meansteps <- aggregate(data3$steps, by = list(data$date), mean)
meansteps <- aggregate(data$steps, by = list(data$date), mean)
meansteps
for (n in uniques) {
subse[which(subse[,2] == uniques[n]),] <- if (meansteps[n] > 0){
meansteps[n]
} else if (meansteps[n] == 0) {
0
}
}
means|
meansteps
for (n in uniques) {
subse[which(subse[,2] == uniques[n]),] <- if (meansteps[n,2] > 0){
meansteps[n,2]
} else if (meansteps[n,2] == 0) {
0
}
}
meansteps[1,2] %>% 0
meansteps[n,2] > 0
meansteps[1,2] > 0
meansteps
(meansteps[n,2] %>% 0)
meansteps[2,2] > 0
for (n in uniques) {
subse[which(subse[,2] == uniques[n]),] <- if (is.na(meansteps[n, 2])){
0
} else if (meansteps[n, 2] == 0) {
0
} else if (meansteps[n, 2] > 0){
meansteps[n,2]
}
}
subse
subse[which(subse[,2] == uniques[1]),] <- 1
subse[which(subse[,2] == uniques[1]),]
subse[which(subse[,2] == uniques[1]),1] <- 1
subse
for (n in uniques) {
subse[which(subse[,2] == uniques[n]),1] <- if (is.na(meansteps[n, 2])){
0
} else if (meansteps[n, 2] == 0) {
0
} else if (meansteps[n, 2] > 0){
meansteps[n,2]
}
}
subse
subse[which(subse[,2] == uniques[1]),1] <-2
subse
uniques
for (i in uniques) {
subse[which(subse[,2] == uniques[i]),1] <- if (is.na(meansteps[i, 2])){
0
} else if (meansteps[i, 2] == 0) {
0
} else if (meansteps[i, 2] > 0){
meansteps[n,2]
}
}
subse
for (i in uniques) {
subse[which(subse[,2] == uniques[i]),1] <- meansteps[i,2]
}
subse
for (i in uniques) {
subse[which(subse[,2] == uniques[i]),1] <- meansteps[i,2]
subse
}
subse
for (i in uniques) {
subse[which(subse[,2] == uniques[i]),1] <- 1
}
subse
for (i in uniques) {
subse[which(subse[,2] == uniques[i]),1] <- if (is.na(meansteps[i, 2])){
0
} else if (meansteps[i, 2] == 0) {
0
} else if (meansteps[i, 2] > 0){
meansteps[n,2]
}
print(subse)
}
for (i in uniques) {
subse[which(subse[,2] == uniques[i]),1] <- if (is.na(meansteps[i, 2])){
0
} else if (meansteps[i, 2] == 0) {
0
} else if (meansteps[i, 2] > 0){
meansteps[n,2]
}
subse <- subse
}
subse
for (i in uniques) {
subse[which(subse[,2] == uniques[i]),1] <- if (is.na(meansteps[i, 2])){
0
} else if (meansteps[i, 2] == 0) {
0
} else if (meansteps[i, 2] > 0){
meansteps[i,2]
}
subse <- subse
}
subse
for (i in uniques) {
subse[which(subse[,2] == uniques[i]),1] <- if (is.na(meansteps[i, 2])){
0
} else if (meansteps[i, 2] == 0) {
0
} else if (meansteps[i, 2] > 0){
meansteps[i,2]
}
print(i)
}
uniques
for (i in 1:61) {
subse[which(subse[,2] == uniques[i]),1] <- if (is.na(meansteps[i, 2])){
0
} else if (meansteps[i, 2] == 0) {
0
} else if (meansteps[i, 2] > 0){
meansteps[i,2]
}
print(i)
}
subse
View(subse)
meansteps
subse
merge(data,subse)
datafin <- merge(data,subse)
datafin
datafin <- rbind(data,subse)
datafin
data <- read.csv("./activity.csv", sep = ",")
data[is.na(data[,1]),1]
data[is.na(data[,1]),1] <- 0
data <- read.csv("./activity.csv", sep = ",")
uniques <- unique(data$date)
for (i in 1:61) {
subse[which(subse[,2] == uniques[i]),1] <- if (is.na(meansteps[i, 2])){
0
} else if (meansteps[i, 2] == 0) {
0
} else if (meansteps[i, 2] > 0){
meansteps[i,2]
}
}
datafin <- data
datafin[is.na(datafin[,1]),1] <- 0
datafin
agro <- aggregate(datafin$steps, by = list(datafin$date))
agro <- aggregate(datafin$steps, by = list(datafin$date), sum)
names(agro) <- c("Date", "Steps")
agro
ggplot(agro, aes(x = Date, y = Steps)) +
geom_histogram(binwidth = 1, stat = "identity") +
xlab("Date")
meansteps2 <- aggregate(datafin$steps, by = list(datafin$date), mean)
mediansteps2 <- aggregate(datafin$steps, by = list(datafin$date), median)
stepscalc2 <- merge(meansteps, mediansteps, by = "Group.1")
names(stepscalc2) <- c("Date", "Mean", "Median")
stepscalc2
?weekdays
weekdays(datafin$date)
datafin$date <- as.POSIXlt(datafin$date)
weekdays(datafin$date)
weekends(datafin$date)
weekend(datafin$date)
weeks <- if (weeks == "lunes"){
"weekday"
}
weeks <- if (weeks == c("lunes")){
"weekday"
}
weeks
weeks <- weekdays(datafin$date)
weeks
weeks <- if (weeks == c("lunes")){
"weekday"
}
which(weeks == c("lunes"))
weeks
weeks <- weekdays(datafin$date)
which(weeks == c("lunes"))
weekdais <- c("lunes", "martes", "miercoles", "jueves", "viernes")
weeks[which(weeks %in% weekdais)] <- "weekday"
weeks
View(weeks)
weekens <- c("sábado", "domingo")
weeks[which(weeks %in% weekdais)] <- "weekday"
weeks[which(weeks %in% weekens)] <- "weekend"
which(weeks == c("weekend") )
which(weeks == c("weekday") )
cbind(datafin, weeks)
weekdata <- cbind(datafin, weeks)
levels(weeks)
plot(weekdata$interval, weekdata$steps, type = "l")
agro <- aggregate(datafin$steps, by = list(datafin$date), sum)
aggregate(datafin$steps, by = list(datafin$date), sum)
datafin
agro <- aggregate(datafin$steps, by = list("datafin$date"), sum)
agro <- aggregate(datafin$steps, by = list("date"), sum)
agro <- aggregate(datafin$steps, by = list(datafin$date), sum)
aggregate(weekdata$steps, by = list(weekdata$interval, weekdata$weeks), mean)
weekdata
datafin$date <- as.POSIXlt(datafin$date)
weeks <- weekdays(datafin$date)
weekdais <- c("lunes", "martes", "miércoles", "jueves", "viernes")
weekens <- c("sábado", "domingo")
weeks[which(weeks %in% weekdais)] <- "weekday"
weeks[which(weeks %in% weekens)] <- "weekend"
weekdata <- cbind(datafin, weeks)
aggregate(weekdata$steps, by = list(weekdata$interval, weekdata$weeks), mean)
names(dpd) <- c("interval", "weeks", "mean")
dpd <- aggregate(weekdata$steps, by = list(weekdata$interval, weekdata$weeks), mean)
names(dpd) <- c("interval", "weeks", "mean")
par(mfrow=c(2,1))
plot(dpd$interval, dpd$mean, type = "l")
par(mfrow=c(2,1))
plot(dpd$interval[dpd$weeks == c("weekday")], dpd$mean[dpd$weeks == c("weekday")], type = "l")
plot(dpd$interval[dpd$weeks == c("weekend")], dpd$mean[dpd$weeks == c("weekend")], type = "l")
xlab("5 minutes interval")
library(lattice)
xyplot(~ dpd$interval | dpd$mean)
par(mfrow=c(2,1))
plot(dpd$interval[dpd$weeks == c("weekday")], dpd$mean[dpd$weeks == c("weekday")], type = "l", xlab = "5 minute interval", ylab = "Average steps", main = "Average steps per 5 minutes interval and by weekdays")
plot(dpd$interval[dpd$weeks == c("weekend")], dpd$mean[dpd$weeks == c("weekend")], type = "l")
plot(dpd$interval[dpd$weeks == c("weekday")], dpd$mean[dpd$weeks == c("weekday")], type = "l", xlab = "5 minute interval", ylab = "Average steps", main = "Weekdays")
plot(dpd$interval[dpd$weeks == c("weekend")], dpd$mean[dpd$weeks == c("weekend")], type = "l", xlab = "5 minute interval", ylab = "Average steps", main = "Weekends")
